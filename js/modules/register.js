// M√≥dulo de Registro de Usu√°rios
import {
  createUserWithEmailAndPassword,
  updateProfile
} from 'https://www.gstatic.com/firebasejs/10.7.1/firebase-auth-compat.js'
import {
  doc,
  setDoc,
  getDoc
} from 'https://www.gstatic.com/firebasejs/10.7.1/firebase-firestore-compat.js'
import { auth, db } from './firebase-config.js'

/**
 * Registra um novo usu√°rio no Firebase Auth e salva dados no Firestore
 * @param {string} nome - Nome completo do usu√°rio
 * @param {string} email - Email do usu√°rio
 * @param {string} senha - Senha do usu√°rio
 * @param {string} papel - Papel do usu√°rio ('sindico' ou 'morador')
 * @returns {Promise<{success: boolean, user?: any, error?: string}>}
 */
export async function registerUser(nome, email, senha, papel) {
  try {
    console.log('üöÄ Iniciando registro de usu√°rio:', { nome, email, papel })

    // 1. Criar usu√°rio no Firebase Auth
    const userCredential = await createUserWithEmailAndPassword(
      auth,
      email,
      senha
    )
    const user = userCredential.user

    console.log('‚úÖ Usu√°rio criado no Firebase Auth:', user.uid)

    // 2. Atualizar perfil do usu√°rio com o nome
    await updateProfile(user, {
      displayName: nome
    })

    console.log('‚úÖ Perfil do usu√°rio atualizado com nome')

    // 3. Salvar dados adicionais no Firestore
    const userData = {
      nome: nome,
      email: email,
      papel: papel,
      condominioId: null,
      dataCadastro: new Date(),
      status: 'ativo',
      uid: user.uid
    }

    // Usar setDoc para criar o documento com o UID do usu√°rio como ID
    await setDoc(doc(db, 'usuarios', user.uid), userData)

    console.log('‚úÖ Dados do usu√°rio salvos no Firestore')

    return {
      success: true,
      user: {
        uid: user.uid,
        email: user.email,
        displayName: nome,
        ...userData
      }
    }
  } catch (error) {
    console.error('‚ùå Erro no registro:', error)

    // Traduzir mensagens de erro para portugu√™s
    const errorMessage = getErrorMessage(error.code)

    return {
      success: false,
      error: errorMessage
    }
  }
}

/**
 * Registra um usu√°rio que fez login com Google
 * @param {Object} user - Objeto do usu√°rio do Firebase Auth
 * @param {string} papel - Papel do usu√°rio ('sindico' ou 'morador')
 * @returns {Promise<{success: boolean, user?: any, error?: string}>}
 */
export async function registerGoogleUser(user, papel) {
  try {
    console.log('üöÄ Iniciando registro de usu√°rio Google:', {
      nome: user.displayName,
      email: user.email,
      papel
    })

    // Verificar se o usu√°rio j√° existe no Firestore
    const existingUser = await getUserData(user.uid)

    if (existingUser) {
      console.log('‚úÖ Usu√°rio Google j√° existe no Firestore')
      return {
        success: true,
        user: {
          uid: user.uid,
          email: user.email,
          displayName: user.displayName,
          ...existingUser
        }
      }
    }

    // Salvar dados do usu√°rio Google no Firestore
    const userData = {
      nome: user.displayName || user.email,
      email: user.email,
      papel: papel,
      condominioId: null,
      dataCadastro: new Date(),
      status: 'ativo',
      uid: user.uid
    }

    await setDoc(doc(db, 'usuarios', user.uid), userData)

    console.log('‚úÖ Dados do usu√°rio Google salvos no Firestore')

    return {
      success: true,
      user: {
        uid: user.uid,
        email: user.email,
        displayName: user.displayName,
        ...userData
      }
    }
  } catch (error) {
    console.error('‚ùå Erro no registro do usu√°rio Google:', error)

    const errorMessage = getErrorMessage(error.code)

    return {
      success: false,
      error: errorMessage
    }
  }
}

/**
 * Traduz c√≥digos de erro do Firebase para portugu√™s
 * @param {string} errorCode - C√≥digo de erro do Firebase
 * @returns {string} - Mensagem de erro traduzida
 */
function getErrorMessage(errorCode) {
  const errorMessages = {
    'auth/email-already-in-use':
      'Este email j√° est√° sendo usado por outra conta.',
    'auth/invalid-email': 'O formato do email √© inv√°lido.',
    'auth/operation-not-allowed':
      'O registro com email e senha n√£o est√° habilitado.',
    'auth/weak-password': 'A senha deve ter pelo menos 6 caracteres.',
    'auth/user-disabled': 'Esta conta foi desabilitada.',
    'auth/user-not-found': 'Usu√°rio n√£o encontrado.',
    'auth/wrong-password': 'Senha incorreta.',
    'auth/too-many-requests': 'Muitas tentativas. Tente novamente mais tarde.',
    'auth/network-request-failed': 'Erro de conex√£o. Verifique sua internet.',
    'permission-denied': 'Permiss√£o negada para acessar o banco de dados.',
    unavailable: 'Servi√ßo temporariamente indispon√≠vel.',
    unauthenticated: 'Usu√°rio n√£o autenticado.'
  }

  return errorMessages[errorCode] || `Erro desconhecido: ${errorCode}`
}

/**
 * Verifica se um email j√° est√° em uso
 * @param {string} email - Email a ser verificado
 * @returns {Promise<boolean>} - true se o email est√° em uso
 */
export async function checkEmailExists(email) {
  try {
    // Tentar criar um usu√°rio tempor√°rio para verificar se o email existe
    // Esta √© uma abordagem alternativa, pois o Firebase n√£o fornece uma API direta para verificar emails
    const tempUser = await createUserWithEmailAndPassword(
      auth,
      email,
      'tempPassword123!'
    )

    // Se chegou aqui, o email n√£o estava em uso, ent√£o deletar o usu√°rio tempor√°rio
    await tempUser.user.delete()

    return false
  } catch (error) {
    if (error.code === 'auth/email-already-in-use') {
      return true
    }
    // Para outros erros, assumir que o email n√£o est√° em uso
    return false
  }
}

/**
 * Valida os dados do formul√°rio de registro
 * @param {Object} formData - Dados do formul√°rio
 * @returns {Object} - Resultado da valida√ß√£o
 */
export function validateRegistrationData(formData) {
  const errors = {}

  // Validar nome
  if (!formData.nome || formData.nome.trim().length < 3) {
    errors.nome = 'Nome deve ter pelo menos 3 caracteres'
  }

  // Validar email
  const emailRegex = /^[^\s@]+@[^\s@]+\.[^\s@]+$/
  if (!formData.email || !emailRegex.test(formData.email)) {
    errors.email = 'Email inv√°lido'
  }

  // Validar senha
  if (!formData.senha || formData.senha.length < 6) {
    errors.senha = 'Senha deve ter pelo menos 6 caracteres'
  }

  // Validar papel
  if (!formData.papel || !['sindico', 'morador'].includes(formData.papel)) {
    errors.papel = 'Papel deve ser "s√≠ndico" ou "morador"'
  }

  return {
    isValid: Object.keys(errors).length === 0,
    errors
  }
}

/**
 * Obt√©m dados do usu√°rio do Firestore
 * @param {string} uid - UID do usu√°rio
 * @returns {Promise<Object|null>} - Dados do usu√°rio ou null se n√£o encontrado
 */
export async function getUserData(uid) {
  try {
    const userDoc = await getDoc(doc(db, 'usuarios', uid))

    if (userDoc.exists()) {
      return {
        id: userDoc.id,
        ...userDoc.data()
      }
    }

    return null
  } catch (error) {
    console.error('‚ùå Erro ao buscar dados do usu√°rio:', error)
    return null
  }
}

// Exportar fun√ß√£o principal como default
export default registerUser
